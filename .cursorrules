# BidFlow Design System Rules

## Project Structure
- Use Next.js with App Router
- Implement TypeScript for type safety
- Organize components in a modular structure
- Follow atomic design principles

## Dependencies
```json
{
  "dependencies": {
    "@headlessui/react": "^1.7.18",
    "@heroicons/react": "^2.1.1",
    "@hookform/resolvers": "^3.3.4",
    "next": "14.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.50.1",
    "react-hot-toast": "^2.4.1",
    "zod": "^3.22.4",
    "zustand": "^4.5.1"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.7",
    "@tailwindcss/typography": "^0.5.10",
    "autoprefixer": "^10.4.17",
    "tailwindcss": "^3.4.1"
  }
}
```

## Tailwind Configuration
```javascript
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
        secondary: {
          50: '#f5f3ff',
          100: '#ede9fe',
          200: '#ddd6fe',
          300: '#c4b5fd',
          400: '#a78bfa',
          500: '#8b5cf6',
          600: '#7c3aed',
          700: '#6d28d9',
          800: '#5b21b6',
          900: '#4c1d95',
        },
        accent: {
          50: '#fff1f2',
          100: '#ffe4e6',
          200: '#fecdd3',
          300: '#fda4af',
          400: '#fb7185',
          500: '#f43f5e',
          600: '#e11d48',
          700: '#be123c',
          800: '#9f1239',
          900: '#881337',
        },
      },
      boxShadow: {
        'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',
        'glow': '0 0 15px rgba(66, 153, 225, 0.5)',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
}
```

## Component Templates

### Layout Template
```tsx
export default function MainLayout({ children }: { children: React.ReactNode }) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary-50 to-secondary-50/30">
      <main className="py-10 animate-slide-up">
        <div className="mx-auto max-w-7xl sm:px-6 lg:px-8">
          {children}
        </div>
      </main>
    </div>
  );
}
```

### Page Header Template
```tsx
<div className="mb-8">
  <h1 className="text-4xl font-bold bg-gradient-to-r from-primary-600 to-secondary-600 bg-clip-text text-transparent">
    Page Title
  </h1>
  <p className="mt-2 text-gray-600">
    Page description goes here
  </p>
</div>
```

### Card Template
```tsx
<div className="rounded-2xl bg-white/80 backdrop-blur-sm shadow-soft hover:shadow-glow transition-all duration-300">
  <div className="p-8">
    {/* Card content */}
  </div>
</div>
```

### Button Templates
```tsx
// Primary Button
<button className="inline-flex items-center px-4 py-2 rounded-full bg-primary-600 text-white font-medium hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 transition-colors duration-200">
  Button Text
</button>

// Secondary Button
<button className="inline-flex items-center px-4 py-2 rounded-full bg-white text-gray-700 font-medium hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 transition-colors duration-200">
  Button Text
</button>
```

### Form Input Template
```tsx
<div>
  <label className="block text-sm font-medium text-gray-700 mb-1">
    Label Text
  </label>
  <input
    type="text"
    className="w-full rounded-lg border-gray-300 bg-white/50 shadow-soft focus:border-primary-500 focus:ring-primary-500 disabled:bg-gray-100/50"
  />
</div>
```

## CSS Rules

### Global Styles
```css
@layer base {
  html {
    @apply h-full bg-gradient-to-br from-primary-50 to-secondary-50/30 scroll-smooth;
  }
  body {
    @apply h-full antialiased;
  }
  h1, h2, h3, h4, h5, h6 {
    @apply font-bold tracking-tight;
  }
}

@layer components {
  .btn-primary {
    @apply inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-primary-600 to-secondary-600 px-4 py-2.5 text-sm font-semibold text-white shadow-soft hover:from-primary-500 hover:to-secondary-500 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-all duration-200;
  }
  
  .card {
    @apply rounded-2xl bg-white/80 backdrop-blur-sm p-6 shadow-soft hover:shadow-glow transition-all duration-300;
  }

  .form-input {
    @apply block w-full rounded-lg border-gray-200 bg-white px-4 py-2.5 shadow-soft focus:border-primary-500 focus:ring-primary-500 transition-all duration-200;
  }
}
```

## Design Principles

1. Use gradient backgrounds for depth
2. Implement soft shadows and hover effects
3. Use rounded corners (border-radius) consistently
4. Apply smooth transitions and animations
5. Maintain consistent spacing
6. Use a clear typography hierarchy
7. Implement responsive design patterns

## Common Patterns

### Gradient Text
```tsx
<h1 className="bg-gradient-to-r from-primary-600 to-secondary-600 bg-clip-text text-transparent">
  Gradient Text
</h1>
```

### Card with Hover Effect
```tsx
<div className="relative overflow-hidden rounded-2xl bg-white p-6 shadow-soft hover:shadow-glow transition-all duration-300">
  <div className="absolute inset-0 bg-gradient-to-r from-primary-500/5 to-secondary-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
  {/* Card content */}
</div>
```

### Status Badge
```tsx
<span className={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${
  status === 'active' ? 'bg-green-100 text-green-800' :
  status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
  'bg-red-100 text-red-800'
}`}>
  {status}
</span>
```

## Best Practices

1. Use semantic HTML elements
2. Implement proper accessibility attributes
3. Maintain consistent spacing using Tailwind's spacing scale
4. Use CSS Grid and Flexbox for layouts
5. Implement responsive breakpoints
6. Use proper form validation and error handling
7. Implement loading states and transitions
8. Use proper color contrast ratios
9. Implement proper error boundaries
10. Use proper state management patterns 